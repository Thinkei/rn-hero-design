// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactNative from "react-native";

var emptyStyle = { };

function getStylesBySize(size, styles) {
  var mediumSizeStyles = {
    wrapper: styles.mediumWrapper,
    titleWrapper: styles.mediumTitleWrapper,
    title: styles.mediumTitle,
    image: styles.mediumImage
  };
  var largeSizeStyles = {
    wrapper: styles.largeWrapper,
    titleWrapper: styles.largeTitleWrapper,
    title: styles.largeTitle,
    image: styles.largeImage
  };
  return Belt_Option.mapWithDefault(size, mediumSizeStyles, (function (param) {
                if (param === "large") {
                  return largeSizeStyles;
                } else {
                  return mediumSizeStyles;
                }
              }));
}

function Avatar(Props) {
  var source = Props.source;
  var size = Props.size;
  var match = Props.title;
  var title = match !== undefined ? match : "";
  var wrapperStyle = Props.wrapperStyle;
  var titleStyle = Props.titleStyle;
  var match$1 = Props.theme;
  var theme = match$1 !== undefined ? Caml_option.valFromOption(match$1) : Hero_Theme.$$default;
  var styles = getStylesBySize(size, theme.avatar);
  return React.createElement(ReactNative.View, {
              style: ReactNative.StyleSheet.flatten(/* array */[
                    theme.avatar.wrapper,
                    styles.wrapper,
                    Belt_Option.getWithDefault(wrapperStyle, emptyStyle)
                  ]),
              children: null
            }, React.createElement(ReactNative.View, {
                  style: ReactNative.StyleSheet.flatten(/* array */[
                        theme.avatar.titleWrapper,
                        styles.titleWrapper
                      ]),
                  children: React.createElement(ReactNative.Text, {
                        style: ReactNative.StyleSheet.flatten(/* array */[
                              theme.avatar.title,
                              styles.title,
                              Belt_Option.getWithDefault(titleStyle, emptyStyle)
                            ]),
                        children: title
                      })
                }), source !== undefined ? React.createElement(ReactNative.Image, {
                    resizeMode: "cover",
                    source: {
                      uri: source
                    },
                    style: ReactNative.StyleSheet.flatten(/* array */[
                          theme.avatar.image,
                          styles.image
                        ])
                  }) : null);
}

var $pipe$pipe$eq = Belt_Option.getWithDefault;

var make = Avatar;

var $$default = Avatar;

export {
  $pipe$pipe$eq ,
  emptyStyle ,
  getStylesBySize ,
  make ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
