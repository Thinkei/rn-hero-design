// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Helpers from "../bindings/Helpers.bs.js";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactNative from "react-native";

function BottomButton$Wrapper(Props) {
  var enabled = Props.enabled;
  var onPress = Props.onPress;
  var style = Props.style;
  var children = Props.children;
  if (enabled && onPress !== undefined) {
    return React.createElement(ReactNative.TouchableOpacity, {
                style: style,
                onPress: onPress,
                children: children
              });
  }
  return React.createElement(ReactNative.View, {
              style: style,
              children: children
            });
}

var Wrapper = {
  make: BottomButton$Wrapper
};

var emptyStyle = { };

function BottomButton(Props) {
  var text = Props.text;
  var onPress = Props.onPress;
  var match = Props.disabled;
  var disabled = match !== undefined ? match : false;
  var match$1 = Props.loading;
  var loading = match$1 !== undefined ? match$1 : false;
  var forceInset = Props.forceInset;
  var match$2 = Props.wrapperStyle;
  var wrapperStyle = match$2 !== undefined ? Caml_option.valFromOption(match$2) : emptyStyle;
  var match$3 = Props.buttonStyle;
  var buttonStyle = match$3 !== undefined ? Caml_option.valFromOption(match$3) : emptyStyle;
  var match$4 = Props.textStyle;
  var textStyle = match$4 !== undefined ? Caml_option.valFromOption(match$4) : emptyStyle;
  var match$5 = Props.theme;
  var theme = match$5 !== undefined ? Caml_option.valFromOption(match$5) : Hero_Theme.$$default;
  var match$6 = React.useState((function () {
          return false;
        }));
  var setShowKeyboard = match$6[1];
  var hasHomeBar = Helpers.hasHomeBar(/* () */0);
  var themeWrapperStyle;
  var exit = 0;
  if (forceInset !== undefined) {
    switch (forceInset) {
      case "always" :
          themeWrapperStyle = theme.bottomButton.wrapperWithHomeBar;
          break;
      case "never" :
          themeWrapperStyle = theme.bottomButton.wrapperWithoutHomeBar;
          break;
      default:
        exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    themeWrapperStyle = match$6[0] || !hasHomeBar ? theme.bottomButton.wrapperWithoutHomeBar : theme.bottomButton.wrapperWithHomeBar;
  }
  React.useEffect((function () {
          var listener = ReactNative.Keyboard.addListener("keyboardWillShow", (function (param) {
                  return Curry._1(setShowKeyboard, (function (param) {
                                return true;
                              }));
                }));
          return (function (param) {
                    listener.remove();
                    return /* () */0;
                  });
        }), ([]));
  React.useEffect((function () {
          var listener = ReactNative.Keyboard.addListener("keyboardWillHide", (function (param) {
                  return Curry._1(setShowKeyboard, (function (param) {
                                return false;
                              }));
                }));
          return (function (param) {
                    listener.remove();
                    return /* () */0;
                  });
        }), ([]));
  var tmp;
  var exit$1 = 0;
  if (loading && !disabled) {
    tmp = React.createElement(ReactNative.ActivityIndicator, {
          color: theme.bottomButton.loadingIndicator.color,
          size: "small"
        });
  } else {
    exit$1 = 1;
  }
  if (exit$1 === 1) {
    tmp = React.createElement(ReactNative.Text, {
          style: ReactNative.StyleSheet.flatten(/* array */[
                theme.bottomButton.text,
                disabled ? theme.bottomButton.disabledText : emptyStyle,
                textStyle
              ]),
          children: text
        });
  }
  var tmp$1 = {
    enabled: !loading && !disabled,
    style: ReactNative.StyleSheet.flatten(/* array */[
          theme.bottomButton.wrapper,
          themeWrapperStyle,
          disabled ? theme.bottomButton.disabledWrapper : emptyStyle,
          wrapperStyle
        ]),
    children: React.createElement(ReactNative.View, {
          style: ReactNative.StyleSheet.flatten(/* array */[
                theme.bottomButton.button,
                buttonStyle
              ]),
          children: tmp
        })
  };
  if (onPress !== undefined) {
    tmp$1.onPress = Caml_option.valFromOption(onPress);
  }
  return React.createElement(BottomButton$Wrapper, tmp$1);
}

var make = BottomButton;

var $$default = BottomButton;

export {
  Wrapper ,
  emptyStyle ,
  make ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
