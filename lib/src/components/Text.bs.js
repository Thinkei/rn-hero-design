// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as ReactNative from "react-native";

var emptyStyle = { };

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -1055161979,
    "bold"
  ],
  /* tuple */[
    812216871,
    "normal"
  ],
  /* tuple */[
    1055956338,
    "100"
  ],
  /* tuple */[
    1056006067,
    "200"
  ],
  /* tuple */[
    1056055796,
    "300"
  ],
  /* tuple */[
    1056105525,
    "400"
  ],
  /* tuple */[
    1056155254,
    "500"
  ],
  /* tuple */[
    1056204983,
    "600"
  ],
  /* tuple */[
    1056254712,
    "700"
  ],
  /* tuple */[
    1056304441,
    "800"
  ],
  /* tuple */[
    1056354170,
    "900"
  ]
];

function weightToJs(param) {
  return Js_mapperRt.binarySearch(11, param, jsMapperConstantArray);
}

function weightFromJs(param) {
  return Js_mapperRt.revSearch(11, jsMapperConstantArray, param);
}

function $pipe$question(x, y) {
  if (x !== undefined) {
    return Caml_option.valFromOption(x);
  } else {
    return y;
  }
}

function $$Text(Props) {
  var children = Props.children;
  var size = Props.size;
  var weight = Props.weight;
  var color = Props.color;
  var style = Props.style;
  var match = Props.theme;
  var theme = match !== undefined ? Caml_option.valFromOption(match) : Hero_Theme.$$default;
  var tmp = {
    fontWeight: (function () {
          switch (Belt_Option.getWithDefault(Belt_Option.flatMap(weight, weightFromJs), /* _400 */1056105525)) {
            case 812216871 :
                return "normal";
            case -1055161979 :
                return "bold";
            case 1055956338 :
                return "100";
            case 1056006067 :
                return "200";
            case 1056055796 :
                return "300";
            case 1056105525 :
                return "400";
            case 1056155254 :
                return "500";
            case 1056204983 :
                return "600";
            case 1056254712 :
                return "700";
            case 1056304441 :
                return "800";
            case 1056354170 :
                return "900";
            
          }
        })()
  };
  if (color !== undefined) {
    tmp.color = Caml_option.valFromOption(color);
  }
  return React.createElement(ReactNative.Text, {
              style: ReactNative.StyleSheet.flatten(/* array */[
                    theme.text.text,
                    Belt_Option.mapWithDefault(size, emptyStyle, (function (size) {
                            switch (size) {
                              case "h1" :
                                  return theme.text.h1;
                              case "h2" :
                                  return theme.text.h2;
                              case "h3" :
                                  return theme.text.h3;
                              case "h4" :
                                  return theme.text.h4;
                              case "h5" :
                                  return theme.text.h5;
                              default:
                                return emptyStyle;
                            }
                          })),
                    tmp,
                    $pipe$question(style, emptyStyle)
                  ]),
              children: children
            });
}

var make = $$Text;

var $$default = $$Text;

export {
  emptyStyle ,
  weightToJs ,
  weightFromJs ,
  $pipe$question ,
  make ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
