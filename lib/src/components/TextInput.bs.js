// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactNative from "react-native";

function isEmptyString(str) {
  return str.length === 0;
}

var emptyStyle = { };

function noop(param) {
  return /* () */0;
}

function TextInput(Props) {
  var match = Props.label;
  var label = match !== undefined ? match : "";
  var match$1 = Props.value;
  var value = match$1 !== undefined ? match$1 : "";
  var match$2 = Props.onChange;
  var onChange = match$2 !== undefined ? match$2 : noop;
  var match$3 = Props.onChangeText;
  var onChangeText = match$3 !== undefined ? match$3 : noop;
  var match$4 = Props.onFocus;
  var onFocus = match$4 !== undefined ? match$4 : noop;
  var match$5 = Props.onBlur;
  var onBlur = match$5 !== undefined ? match$5 : noop;
  var match$6 = Props.onPressIcon;
  var onPressIcon = match$6 !== undefined ? match$6 : noop;
  var match$7 = Props.rightIcon;
  var rightIcon = match$7 !== undefined ? match$7 : "";
  var match$8 = Props.disabled;
  var disabled = match$8 !== undefined ? match$8 : false;
  var match$9 = Props.error;
  var error = match$9 !== undefined ? match$9 : "";
  var match$10 = Props.autoFocus;
  var autoFocus = match$10 !== undefined ? match$10 : false;
  var match$11 = Props.secureTextEntry;
  var secureTextEntry = match$11 !== undefined ? match$11 : false;
  var match$12 = Props.multiline;
  var multiline = match$12 !== undefined ? match$12 : false;
  var match$13 = Props.wrapperStyle;
  var wrapperStyle = match$13 !== undefined ? Caml_option.valFromOption(match$13) : emptyStyle;
  var match$14 = Props.labelStyle;
  var labelStyle = match$14 !== undefined ? Caml_option.valFromOption(match$14) : emptyStyle;
  var match$15 = Props.inputStyle;
  var inputStyle = match$15 !== undefined ? Caml_option.valFromOption(match$15) : emptyStyle;
  var match$16 = Props.iconStyle;
  var iconStyle = match$16 !== undefined ? Caml_option.valFromOption(match$16) : emptyStyle;
  var match$17 = Props.errorStyle;
  var errorStyle = match$17 !== undefined ? Caml_option.valFromOption(match$17) : emptyStyle;
  var match$18 = Props.theme;
  var theme = match$18 !== undefined ? Caml_option.valFromOption(match$18) : Hero_Theme.$$default;
  var match$19 = React.useState((function () {
          return false;
        }));
  var setFocused = match$19[1];
  var focused = match$19[0];
  var handleFocus = React.useCallback((function (param) {
          Curry._1(setFocused, (function (param) {
                  return true;
                }));
          Curry._1(onFocus, /* () */0);
          return /* () */0;
        }), /* tuple */[
        onFocus,
        setFocused
      ]);
  var handleBlur = React.useCallback((function (param) {
          Curry._1(setFocused, (function (param) {
                  return false;
                }));
          Curry._1(onBlur, /* () */0);
          return /* () */0;
        }), /* tuple */[
        onBlur,
        setFocused
      ]);
  var match$20 = error.length !== 0;
  var match$21 = focused || value.length !== 0;
  var match$22 = error.length !== 0;
  var match$23 = !(inputStyle.color == null);
  var match$24 = error.length !== 0;
  return React.createElement(ReactNative.View, {
              style: ReactNative.StyleSheet.flatten(/* array */[
                    theme.textInput.wrapper,
                    wrapperStyle
                  ]),
              children: null
            }, React.createElement(ReactNative.Text, {
                  style: ReactNative.StyleSheet.flatten(/* array */[
                        theme.textInput.label,
                        focused ? theme.textInput.activeLabel : emptyStyle,
                        match$20 ? theme.textInput.errorLabel : emptyStyle,
                        labelStyle
                      ]),
                  children: match$21 ? label : ""
                }), React.createElement(ReactNative.View, {
                  style: ReactNative.StyleSheet.flatten(/* array */[
                        theme.textInput.textInput,
                        focused ? theme.textInput.activeTextInput : emptyStyle,
                        match$22 ? theme.textInput.errorTextInput : emptyStyle,
                        inputStyle
                      ]),
                  children: null
                }, React.createElement(ReactNative.TextInput, {
                      autoFocus: autoFocus,
                      editable: !disabled,
                      multiline: multiline,
                      onBlur: handleBlur,
                      onChange: onChange,
                      onChangeText: onChangeText,
                      onFocus: handleFocus,
                      placeholder: focused ? "" : label,
                      placeholderTextColor: ReactNative.StyleSheet.flatten(/* array */[
                            theme.textInput.baseTextInput,
                            inputStyle,
                            disabled ? theme.textInput.disabledBaseTextInput : emptyStyle
                          ]).color,
                      scrollEnabled: false,
                      secureTextEntry: secureTextEntry,
                      value: value,
                      style: ReactNative.StyleSheet.flatten(/* array */[
                            theme.textInput.baseTextInput,
                            match$23 ? ({
                                  color: inputStyle.color
                                }) : emptyStyle,
                            disabled ? theme.textInput.disabledBaseTextInput : emptyStyle
                          ])
                    }), React.createElement(ReactNative.TouchableWithoutFeedback, {
                      onPress: onPressIcon,
                      children: React.createElement(Icon.make, {
                            icon: rightIcon,
                            size: 20.0,
                            color: ReactNative.StyleSheet.flatten(/* array */[
                                  theme.textInput.icon,
                                  focused ? theme.textInput.activeIcon : emptyStyle,
                                  match$24 ? theme.textInput.errorIcon : emptyStyle,
                                  iconStyle
                                ]).color,
                            wrapperStyle: theme.textInput.icon
                          })
                    })), React.createElement(ReactNative.Text, {
                  style: ReactNative.StyleSheet.flatten(/* array */[
                        theme.textInput.errorMessage,
                        errorStyle
                      ]),
                  children: error
                }));
}

var make = TextInput;

var $$default = TextInput;

export {
  isEmptyString ,
  emptyStyle ,
  noop ,
  make ,
  $$default ,
  $$default as default,
  
}
/* Icon Not a pure module */
