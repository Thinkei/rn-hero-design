// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactNative from "react-native";

function variantFromString(param) {
  switch (param) {
    case "filled" :
        return /* filled */86969762;
    case "outlined" :
        return /* outlined */613841570;
    default:
      return /* filled */86969762;
  }
}

function getStylesByVariant(variant, styles) {
  if (variant >= 613841570) {
    return {
            wrapper: styles.outlinedWrapper,
            text: styles.outlinedText,
            loadingIndicator: styles.outlinedLoadingIndicator
          };
  } else {
    return {
            wrapper: styles.filledWrapper,
            text: styles.filledText,
            loadingIndicator: styles.filledLoadingIndicator
          };
  }
}

function Button(Props) {
  var text = Props.text;
  var onPress = Props.onPress;
  var match = Props.loading;
  var loading = match !== undefined ? match : false;
  var match$1 = Props.disabled;
  var disabled = match$1 !== undefined ? match$1 : false;
  var variant = Props.variant;
  var match$2 = Props.theme;
  var theme = match$2 !== undefined ? Caml_option.valFromOption(match$2) : Hero_Theme.$$default;
  var match$3 = Props.wrapperStyle;
  var wrapperStyle = match$3 !== undefined ? Caml_option.valFromOption(match$3) : { };
  var match$4 = Props.textStyle;
  var textStyle = match$4 !== undefined ? Caml_option.valFromOption(match$4) : { };
  var styles = getStylesByVariant(variantFromString(variant), theme.button);
  var style = ReactNative.StyleSheet.flatten(/* array */[
        theme.button.wrapper,
        styles.wrapper,
        disabled ? theme.button.disabledWrapper : { },
        wrapperStyle
      ]);
  var Button$1 = function (Props) {
    var children = Props.children;
    var match = loading || disabled;
    if (match) {
      return React.createElement(ReactNative.View, {
                  style: style,
                  children: children
                });
    } else {
      return React.createElement(ReactNative.TouchableOpacity, {
                  style: style,
                  onPress: onPress,
                  children: children
                });
    }
  };
  var match$5 = loading && !disabled;
  return React.createElement(Button$1, {
              children: match$5 ? React.createElement(ReactNative.ActivityIndicator, {
                      color: styles.loadingIndicator.color,
                      size: "small"
                    }) : React.createElement(ReactNative.Text, {
                      style: ReactNative.StyleSheet.flatten(/* array */[
                            theme.button.text,
                            styles.text,
                            disabled ? theme.button.disabledText : { },
                            textStyle
                          ]),
                      children: text
                    })
            });
}

var make = Button;

var $$default = Button;

export {
  variantFromString ,
  getStylesByVariant ,
  make ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
