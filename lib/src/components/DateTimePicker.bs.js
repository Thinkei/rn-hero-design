// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Helpers from "../bindings/Helpers.bs.js";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as ReactNativeSafeAreaView from "react-native-safe-area-view";

function noop(param) {
  return /* () */0;
}

function DateTimePicker$DateTimePickerIOS(Props) {
  var show = Props.show;
  var mode = Props.mode;
  var value = Props.value;
  var onChange = Props.onChange;
  var onDismiss = Props.onDismiss;
  var theme = Props.theme;
  var match = React.useState((function () {
          return value;
        }));
  var setPickedDate = match[1];
  var pickedDate = match[0];
  var handleChange = React.useCallback((function (param) {
          Curry._1(onChange, pickedDate);
          Curry._1(onDismiss, /* () */0);
          return /* () */0;
        }), /* array */[pickedDate]);
  var handleDismiss = React.useCallback((function (param) {
          Curry._1(onDismiss, /* () */0);
          return /* () */0;
        }));
  var handleKeyboardWillShow = React.useCallback((function (param) {
          Curry._1(onDismiss, /* () */0);
          return /* () */0;
        }));
  var handleDateChange = React.useCallback((function (date) {
          Curry._1(setPickedDate, (function (param) {
                  return date;
                }));
          return /* () */0;
        }));
  React.useEffect((function () {
          if (show) {
            ReactNative.Keyboard.dismiss();
          }
          var keyboardWillShowListener = ReactNative.Keyboard.addListener("keyboardWillShow", handleKeyboardWillShow);
          Curry._1(setPickedDate, (function (param) {
                  return value;
                }));
          return (function (param) {
                    keyboardWillShowListener.remove();
                    return /* () */0;
                  });
        }), /* tuple */[
        show,
        value
      ]);
  if (show) {
    return React.createElement(ReactNativeSafeAreaView.default, {
                forceInset: {
                  bottom: "always"
                },
                style: theme.dateTimePicker.wrapper,
                children: null
              }, React.createElement(ReactNative.View, {
                    style: theme.dateTimePicker.actions,
                    children: null
                  }, React.createElement(ReactNative.TouchableOpacity, {
                        style: theme.dateTimePicker.action,
                        onPress: handleDismiss,
                        children: React.createElement(ReactNative.Text, {
                              style: theme.dateTimePicker.actionText,
                              children: "Cancel"
                            })
                      }), React.createElement(ReactNative.TouchableOpacity, {
                        style: theme.dateTimePicker.action,
                        onPress: handleChange,
                        children: React.createElement(ReactNative.Text, {
                              style: ReactNative.StyleSheet.flatten(/* array */[
                                    theme.dateTimePicker.actionText,
                                    {
                                      fontWeight: "600"
                                    }
                                  ]),
                              children: "Done"
                            })
                      })), React.createElement(ReactNative.DatePickerIOS, {
                    date: pickedDate,
                    onDateChange: handleDateChange,
                    mode: (function () {
                          switch (mode) {
                            case -1033677266 :
                                return "date";
                            case -855847923 :
                                return "time";
                            case -281947845 :
                                return "datetime";
                            
                          }
                        })()
                  }));
  } else {
    return null;
  }
}

var DateTimePickerIOS = {
  make: DateTimePicker$DateTimePickerIOS
};

function DateTimePicker$DateTimePickerAndroid(Props) {
  var show = Props.show;
  var mode = Props.mode;
  var value = Props.value;
  var onChange = Props.onChange;
  var onDismiss = Props.onDismiss;
  React.useEffect((function () {
          if (show && mode === /* date */-1033677266) {
            var datePickerOptions = {
              date: value
            };
            ReactNative.DatePickerAndroid.open(datePickerOptions).then((function (response) {
                    if (response.action === ReactNative.DatePickerAndroid.dateSetAction) {
                      Curry._1(onChange, new Date(response.year, response.month, response.day));
                    }
                    Curry._1(onDismiss, /* () */0);
                    return Promise.resolve(/* () */0);
                  }));
          }
          return ;
        }), /* array */[show]);
  return null;
}

var DateTimePickerAndroid = {
  make: DateTimePicker$DateTimePickerAndroid
};

function DateTimePicker(Props) {
  var match = Props.show;
  var show = match !== undefined ? match : false;
  var match$1 = Props.mode;
  var mode = match$1 !== undefined ? match$1 : /* date */-1033677266;
  var match$2 = Props.value;
  var value = match$2 !== undefined ? Caml_option.valFromOption(match$2) : new Date();
  var match$3 = Props.onChange;
  var onChange = match$3 !== undefined ? match$3 : noop;
  var match$4 = Props.onDismiss;
  var onDismiss = match$4 !== undefined ? match$4 : noop;
  var match$5 = Props.theme;
  var theme = match$5 !== undefined ? Caml_option.valFromOption(match$5) : Hero_Theme.$$default;
  var match$6 = Helpers.Platform.isAndroid;
  if (match$6) {
    return React.createElement(DateTimePicker$DateTimePickerAndroid, {
                show: show,
                mode: mode,
                value: value,
                onChange: onChange,
                onDismiss: onDismiss
              });
  } else {
    return React.createElement(DateTimePicker$DateTimePickerIOS, {
                show: show,
                mode: mode,
                value: value,
                onChange: onChange,
                onDismiss: onDismiss,
                theme: theme
              });
  }
}

var make = DateTimePicker;

var $$default = DateTimePicker;

export {
  noop ,
  DateTimePickerIOS ,
  DateTimePickerAndroid ,
  make ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
