// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Hero_Theme from "../themes/hero/Hero_Theme.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as Animated$ReactNative from "reason-react-native/src/apis/Animated.bs.js";

function noop(param) {
  return /* () */0;
}

function Switch(Props) {
  var match = Props.value;
  var value = match !== undefined ? match : false;
  var match$1 = Props.onValueChange;
  var onValueChange = match$1 !== undefined ? match$1 : noop;
  var match$2 = Props.theme;
  var theme = match$2 !== undefined ? Caml_option.valFromOption(match$2) : Hero_Theme.$$default;
  var offset = value ? theme._switch.thumbOn.left : theme._switch.thumbOff.left;
  var match$3 = React.useState((function () {
          return new (ReactNative.Animated.Value)(offset);
        }));
  var animatedOffset = match$3[0];
  React.useEffect((function () {
          var config = {
            toValue: offset,
            duration: 200.0
          };
          Animated$ReactNative.start(Animated$ReactNative.timing(animatedOffset, config), undefined, /* () */0);
          return ;
        }), /* array */[value]);
  return React.createElement(ReactNative.TouchableWithoutFeedback, {
              onPress: (function (param) {
                  return Curry._1(onValueChange, !value);
                }),
              children: React.createElement(ReactNative.View, {
                    style: ReactNative.StyleSheet.flatten(/* array */[
                          theme._switch.track,
                          value ? theme._switch.trackOn : theme._switch.trackOff
                        ]),
                    children: React.createElement(ReactNative.View, {
                          style: theme._switch.thumbWrapper,
                          children: React.createElement(Animated$ReactNative.View.make, {
                                style: ReactNative.StyleSheet.flatten(/* array */[
                                      theme._switch.thumb,
                                      value ? theme._switch.thumbOn : theme._switch.thumbOff,
                                      {
                                        left: animatedOffset
                                      }
                                    ])
                              })
                        })
                  })
            });
}

var make = Switch;

var $$default = Switch;

export {
  noop ,
  make ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
